<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAASUVORK5CYII=
</value>
  </data>
</root>